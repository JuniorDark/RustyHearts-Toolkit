using RHToolkit.ViewModels.Windows;
using System.Data;
using System.Windows.Controls;
using Wpf.Ui.Appearance;

namespace RHToolkit.Views.Windows
{
    public partial class RHEditorWindow : Window
    {
        public RHEditorWindow(RHEditorViewModel viewModel)
        {
            SystemThemeWatcher.Watch(this);
            InitializeComponent();
            DataContext = viewModel;
        }

        private void DataGridView_AutoGeneratedColumns(object sender, EventArgs e)
        {
            foreach (var column in dataGridView.Columns)
            {
                var headerTextBlock = new TextBlock { Text = column.Header.ToString() };
                headerTextBlock.Measure(new Size(double.PositiveInfinity, double.PositiveInfinity));
                column.MinWidth = headerTextBlock.DesiredSize.Width + 40;
            }
        }

        private void DataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            if (e.EditAction == DataGridEditAction.Commit)
            {
                var viewModel = (RHEditorViewModel)DataContext;
                var columnIndex = e.Column.DisplayIndex;
                var rowIndex = e.Row.GetIndex();
                var oldValue = ((DataRowView)e.Row.Item).Row[columnIndex];
                var newValue = ((TextBox)e.EditingElement).Text;

                viewModel.RecordEdit(rowIndex, columnIndex, oldValue, newValue);
            }
        }

        private void DataGridView_InitializingNewItem(object sender, InitializingNewItemEventArgs e)
        {
            var viewModel = (RHEditorViewModel)DataContext;

            if (viewModel.FileData == null)
            {
                return;
            }

            // Determine the index of the nID column
            int nIDColumnIndex = viewModel.FileData.Columns.IndexOf("nID");
            if (nIDColumnIndex == -1)
            {
                return;
            }

            // Get all existing nID values
            var existingIDs = new HashSet<int>();
            foreach (DataRow row in viewModel.FileData.Rows)
            {
                if (row.RowState != DataRowState.Deleted)
                {
                    existingIDs.Add(Convert.ToInt32(row[nIDColumnIndex]));
                }
            }

            // Find the next available nID value
            int newNID = 1;
            while (existingIDs.Contains(newNID))
            {
                newNID++;
            }

            // Set the nID value for the new row
            var newRow = (e.NewItem as DataRowView)?.Row;
            if (newRow != null)
            {
                newRow[nIDColumnIndex] = newNID;

                viewModel.RecordRowAddition(viewModel.FileData.Rows.IndexOf(newRow), newRow.ItemArray);
            }
        }

        private void DataGridView_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            dataGridView.Focus();
        }
    }
}
